// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  alternativeEmail String?
  role             Role           @default(USER)
  degree           Degree?
  year             Int?
  studentGroups    StudentGroup[]
  Registration     Registration[]
}

model StudentGroup {
  id    String @id @default(cuid())
  name  String
  users User[]
}

enum Role {
  USER
  COMPANY
  ADMIN
}

enum Degree {
  // Bachelor
  DTEK
  DSIK
  DVIT
  BINF
  IMO
  // Master
  INF
  PROG
  DSC
  // Misc
  ARMNINF
  POST
  MISC
}

enum HappeningType {
  BEDPRES
  EVENT
}

model SpotRange {
  id            String     @id @default(cuid())
  minDegreeYear Int
  maxDegreeYear Int
  spots         Int
  Happening     Happening? @relation(fields: [happeningSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  happeningSlug String?

  @@index([happeningSlug])
}

enum RegistrationStatus {
  REGISTERED
  WAITLISTED
  DEREGISTERED
}

model Registration {
  userId        String
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  happeningSlug String
  happening     Happening          @relation(fields: [happeningSlug], references: [slug], onDelete: Cascade)
  status        RegistrationStatus
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@unique([userId, happeningSlug])
  @@index([happeningSlug])
  @@index([userId])
}

model Happening {
  slug              String         @id @unique
  type              HappeningType
  spotRanges        SpotRange[]
  registrations     Registration[]
  date              DateTime?
  registrationStart DateTime?
  registrationEnd   DateTime?
}

model SiteFeedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  email     String?
  message   String
  comment   String?
  isRead    Boolean  @default(false)
}
